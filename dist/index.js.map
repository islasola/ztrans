{"mappings":"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","sources":["index.js","routes/auth.js","controllers/authController.js"],"sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport authRouter from './routes/auth';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use('/api/v1/auth', authRouter);\n\napp.get('/api', (req, res) => {\n    return res.status(200).json({ message: 'Welcome to Ztrans API' });\n})\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n});\n\napp.use((req, res, next) => {\n    console.log(`Unhandled request: ${req.method} ${req.url}`);\n    next();\n});\n\n","import express from 'express';\nimport bodyParser from 'body-parser';\nimport { login, refreshToken, logout } from '../controllers/authController';\n\nconst router = express.Router();\n\nrouter.post('/login', login);\nrouter.post('/refresh-token', refreshToken);\nrouter.post('/logout', logout);\n\nexport default router;","import { AuthorizationCode } from 'simple-oauth2';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst config = {\n    client: {\n        id: process.env.APP_ID,\n        secret: process.env.APP_SECRET,\n    },\n    auth: {\n        tokenHost: process.env.AUTH_HOST,\n        tokenPath: '/open-apis/authen/v2/oauth/token'\n    },\n};\n\nexport function login(req, res) {\n    const code = req.body?.code || undefined;\n    if (!code) {\n        return res.status(400).json({ error: 'Authorization code is required' });\n    }\n\n    const oauth2 = new AuthorizationCode(config);\n    const tokenConfig = {\n        code,\n        redirect_uri: process.env.REDIRECT_URI,\n    };\n\n    oauth2.getToken(tokenConfig)\n       .then((result) => {\n            console.log('Login Success');\n            res.status(200).json(result);\n        })\n       .catch((error) => {\n            console.error('Login Error', error.data.payload);\n            return res.status(500).json({ error: 'Failed to login' });\n       });\n}\n\nexport function refreshToken(req, res) {\n    console.log('Headers:', req.headers);\n    console.log('Method:', req.method);\n    console.log('Body:', req.body);\n    const { refresh_token } = req.body;\n    if (!refresh_token) {\n        return res.status(400).json({ error: 'Refresh token is required' });\n    }\n\n    const oauth2 = new AuthorizationCode(config);\n    const token = oauth2.createToken({ refresh_token });\n\n    token.refresh((error, result) => {\n        if (error) {\n            console.error('Refresh Token Error', error.message);\n            return res.status(500).json({ error: 'Failed to refresh token' });\n        }\n\n        const { access_token, refresh_token: new_refresh_token, expires_in } = result;\n        res.status(200).json({\n            access_token,\n            refresh_token: new_refresh_token,\n            expires_in,\n            token_type: 'Bearer'\n        });\n    });\n}\n\nexport function logout(req, res) {\n    const { access_token } = req.body;\n    if (!access_token) {\n        return res.status(400).json({ error: 'Access token is required' });\n    }\n\n    const oauth2 = new AuthorizationCode(config);\n    const token = oauth2.createToken({ access_token });\n\n    token.revoke('access_token', (error) => {\n        if (error) {\n            console.error('Logout Error', error.message);\n            return res.status(500).json({ error: 'Failed to logout' });\n        }\n\n        res.status(200).json({ message: 'Successfully logged out' });\n    });\n}"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}